#======================================================
# Mandatory settings
#======================================================

# Hadoop home
hibench.hadoop.home	         <%= node[:hadoop][:home] %>

# Spark home
hibench.spark.home	       <%= node[:spark][:home] %>

# HDFS master, set according to hdfs-site.xml
hibench.hdfs.master		<%= node[:hadoop][:master][:url] %>

# Spark master
#   standalone mode: `spark://xxx:7077`
#   YARN mode: `yarn-client`
#   unset: fallback to `local[1]`
hibench.spark.master		<%= node[:spark][:master][:url] %>

#======================================================
# Not mandatory but important settings
#======================================================

# `hibench.hadoop.executable` is used to auto probe hadoop version and
# hadoop release, which is critical for further configurations. Most
# cases `hadoop` executable be placed under HADOOP_HOME/bin. However,
# in some cases such as CDH?/MR1, it must be explicitly defined:

hibench.hadoop.executable	${hibench.hadoop.home}/bin/hadoop

# `hibench.hadoop.version` will be auto probed according to
# `hibench.hadoop.executable` version information report. However, for
# CDH release, both `hadoop version` of MR1 and MR2 will produce same
# report, which can't probe right MR versions. You'll need to
# explicitly define MR versions here.

hibench.hadoop.version		<%= node[:hadoop][:MR][:version] %>

# `hibench.spark.version` is used to choose which sparkbench workload
# jar. Mostly situation it'll be auto probed. Please override if spark
# version is not probed correctly. 
# Note, supported values: `spark1.2` or `spark1.3`

hibench.spark.version          <%= node[:spark][:version] %>

#======================================================
# Optional settings
#======================================================

# Important parameters
#---------------------

# execute parallelism settings
hibench.default.map.parallelism		<%= node[:hibench][:map][:parallelism] %>
hibench.default.shuffle.parallelism	<%= node[:hibench][:shuffle][:parallelism] %>	

# YARN resource configuration
hibench.yarn.executor.num	4
hibench.yarn.executor.cores	4

# Spark only properties
#----------------------

# executor/driver memory in standalone & YARN mode
spark.executor.memory  2G
spark.driver.memory    2G

# Compression
spark.rdd.compress            false
# compression codec: lz4, lzf, snappy, put class path here accordingly.
spark.shuffle.compress		false
spark.broadcast.compress	false
spark.io.compression.codec    org.apache.spark.io.SnappyCompressionCodec 

# Akka
spark.akka.frameSize          1000
spark.akka.timeout            600

# mllib will use KyroSerializer, ensure the buffer is large enough
spark.kryoserializer.buffer.mb	 2000

# Data scale, Compression profile selection
#------------------------------------------

# Data scale profile: tiny, small, large, ..., defined in 10-data-scale-profile.conf
hibench.scale.profile  	      	       <%= node[:hibench][:data][:scale] %> 
# Compression options selection: enable, disable
hibench.compress.profile	 	disable
# Compression codec profile selection:	 snappy, lzo, default
hibench.compress.codec.profile		snappy

# Streaming settings
#-------------------
# Available benchname: identity sample project grep wordcount distinctcount statistics
hibench.streamingbench.benchname        wordcount	

# data scale of streaming data
hibench.streamingbench.scale.profile    ${hibench.scale.profile}

# zookeeper host:port of kafka cluster
#example         lv-dev:9092
hibench.streamingbench.zookeeper.host	<%= node[:zookeeper][:url] %>

# Kafka broker lists, used for direct mode, written in mode "host:port,host:port,..."
#example         lv-dev:9092
hibench.streamingbench.brokerList	<%= node[:kafka][:brokerList] %>

# Storm home
hibench.streamingbench.storm.home	/PATH/TO/STORM/HOME

# Kafka home
hibench.streamingbench.kafka.home      <%= node[:kafka][:home] %>

# Flink home
hibench.streamingbench.flink.home       <%= node[:flink][:home] %>

#Cluster config
# nimbus of storm cluster
#example         lv-dev:9092
hibench.streamingbench.storm.nimbus	HOSTNAME_TO_STORM_NIMBUS

# partition size settings
hibench.streamingbench.partitions	1
